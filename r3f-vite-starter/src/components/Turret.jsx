/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 turret.glb 
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

export const Turret = (props) => {
  const { nodes, materials } = useGLTF("turret.glb");
  const baseMesh = useRef();
  const turretMesh = useRef();
  const { cannonRef } = props;

  useFrame((state, delta) => {
    if (baseMesh.current) {
      // Calculate rotation angles based on sine function for ping pong effect
      baseMesh.current.rotation.y =
        (Math.sin(state.clock.elapsedTime * 0.5) * Math.PI) / 2; // Adjust speed and range as needed
      turretMesh.current.rotation.y =
        (Math.sin(state.clock.elapsedTime * 0.5) * Math.PI) / 2;
      cannonRef.current.rotation.x =
        (Math.sin(state.clock.elapsedTime * 2.5) * Math.PI) / 8;
    }
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        ref={baseMesh}
        geometry={nodes.base.geometry}
        material={nodes.base.material}
      >
        <mesh
          castShadow
          receiveShadow
          ref={turretMesh}
          geometry={nodes.turret.geometry}
          material={nodes.turret.material}
        >
          <mesh
            castShadow
            receiveShadow
            ref={cannonRef}
            geometry={nodes.Cylinder.geometry}
            material={nodes.Cylinder.material}
            position={[0, 1, -0.231]}
          />
        </mesh>
      </mesh>
    </group>
  );
};

useGLTF.preload("turret.glb");
